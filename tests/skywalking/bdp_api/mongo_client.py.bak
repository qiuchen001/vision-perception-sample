# -*- coding: utf-8 -*-
import pymongo
import requests
import json
import os
from gridfs import GridFS


class MongoFileStore(GridFS):
    def __init__(self, project_name, collection_name, appkey=None, k8s_master_host="10.66.12.37"):
        env = os.getenv("BDP_ENV")
        if env == "dev": # 在k8s内部访问
            validation_service_url = "http://storage-manager-service:8080/mongodb/collections"
            mongo_cluster_url = "mongo-route-business"
            mongo_port = 27017
        elif env == "prod": # 在k8s内部访问
            validation_service_url = "http://storage-manager-service:8080/mongodb/collections"
            mongo_cluster_url = "mongo-route-business"
            mongo_port = 27017
        else: # 没有env，则视为在k8s外部访问，仅可访问default环境
            validation_service_url = "http://" + k8s_master_host + ":30080/default/mongodbsvc/mongodb/collections"
            mongo_cluster_url = k8s_master_host
            mongo_port = 30192
        if collection_name is None or collection_name.strip() == '':
            raise RuntimeError("collection_name must not be empty!")
        if project_name is None or project_name.strip() == '':
            project_name = "public"
        try:
            headers = {'content-type': 'application/json'}
            url = validation_service_url + "/{0}?project-name={1}".format(collection_name, project_name)
            response = requests.get(url, headers=headers)
            if response is None or response.status_code != 200:
                raise RuntimeError('collection not find"' + collection_name + '" not found.')
            collection_info = json.loads(response.content)["collection"]
            authed = True
            if collection_info["enableAuthorization"] == 1:
                authedAppkeys = collection_info["authedAppKeys"]
                if authedAppkeys is not None and authedAppkeys != '':
                    if appkey is None or appkey not in authedAppkeys.split(","):
                        authed = False
                else:
                    authed = False
            if not authed:
                if appkey is None:
                    raise RuntimeError('Collection info"' + project_name + "-" + collection_name + '" authorization denied with empty appkey, please contact ' + collection_info["owners"])
                else:
                    raise RuntimeError(
                        'Collection info"' + project_name + "-" + collection_name + '" authorization denied with appkey "' + appkey + '", please contact ' +
                        collection_info["owners"])
            if collection_info["storeType"] != 'file_store':
                raise RuntimeError("This collection is only used for storing files.")
        except:
            raise RuntimeError("Could not validate collection info: " + project_name + "-" + collection_name)
        try:
            client = pymongo.MongoClient(mongo_cluster_url + ":{0}".format(mongo_port))
            db = client.get_database(project_name)
            GridFS.__init__(self, db, collection=collection_name)
        except:
            raise RuntimeError("Could not connect to mongodb.")

    def put(self, data, filename, **attr):
        file = self.find_one({"filename":filename})
        if file is not None:
            self.delete(file._id)
            GridFS.put(self, data=data,filename=filename,**attr)
        else:
            GridFS.put(self,data=data,filename=filename,**attr)

    def get(self, filename):
        file = self.get_version(filename=filename)
        if file is not None:
            return file.read()
        else:
            return None

    def get_file_stream_by_name(self, filename):
        return self.get_version(filename=filename)

    def delete_file_by_name(self, filename):
        file = self.find_one({"filename": filename})
        if file is not None:
            self.delete(file._id)



class MongoCollection(pymongo.collection.Collection):
    def __init__(self, project_name, collection_name, appkey=None, k8s_master_host=None):
        env = os.getenv("BDP_ENV")
        if env == "dev": # 在k8s内部访问
            validation_service_url = "http://storage-manager-service:8080/mongodb/collections"
            mongo_cluster_url = "mongo-route-business"
            mongo_port = 27017
        elif env == "prod": # 在k8s内部访问
            validation_service_url = "http://storage-manager-service:8080/mongodb/collections"
            mongo_cluster_url = "mongo-route-business"
            mongo_port = 27017
        else: # 没有env，则视为在k8s外部访问，仅可访问default环境
            validation_service_url = "http://" + k8s_master_host + ":30080/default/mongodbsvc/mongodb/collections"
            mongo_cluster_url = k8s_master_host
            mongo_port = 30192
        if collection_name is None or collection_name.strip() == '':
            raise RuntimeError("collection_name must not be empty!")
        if project_name is None or project_name.strip() == '':
            project_name = "public"
        try:
            headers = {'content-type': 'application/json'}
            url = validation_service_url + "/{0}/{1}".format(project_name, collection_name)
            response = requests.get(url, headers=headers)
            if response is None or response.status_code != 200:
                raise RuntimeError('collection not find"' + collection_name + '" not found.')
            collection_info = json.loads(response.content)["collection"]
            authed = True
            if collection_info["enableAuthorization"] == 1:
                authedAppkeys = collection_info["authedAppKeys"]
                if authedAppkeys is not None and authedAppkeys != '':
                    if appkey is None or appkey not in authedAppkeys.split(","):
                        authed = False
                else:
                    authed = False
            if not authed:
                if appkey is None:
                    raise RuntimeError('collection info"' + project_name + "-" + collection_name + '" authorization denied with empty appkey, please contact ' + collection_info["owners"])
                else:
                    raise RuntimeError(
                        'collection info"' + project_name + "-" + collection_name + '" authorization denied with appkey "' + appkey + '", please contact ' +
                        collection_info["owners"])
            if collection_info["storeType"] != 'common_store':
                raise RuntimeError("This collection is only used for storing structured data.")
        except :
            raise RuntimeError("Could not validate collection info: " + project_name + "-" + collection_name)

        try:
            client = pymongo.MongoClient(mongo_cluster_url + ":{0}".format(mongo_port))
            db = client.get_database(project_name)
            pymongo.collection.Collection.__init__(self, db, collection_name)
        except:
            raise RuntimeError("Could not connect to mongodb.")
